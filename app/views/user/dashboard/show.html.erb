
<div id="map"></div>
<div id="right-panel"><div>

<b>Start:</b></br>
<input id="start" type="text" placeholder="Denver, CO" />
<br>
<b>End:</b></br>
<input id="end" type="text" placeholder="Cheyenne, WY" />
<br>
<b>Intervals you need fuel(in miles):</b></br>
<input id="interval" type="text" placeholder="200 miles" />
<br>
<input type="submit" id="submit" class="btn-success">
<br>
</div>
<div id="directions-panel"></div>
</div>

<script>
  function initMap() {
    var directionsService = new google.maps.DirectionsService;
    var directionsDisplay = new google.maps.DirectionsRenderer;
    var map = new google.maps.Map(document.getElementById('map'), {
      zoom: 6,
      center: {lat: 39.73, lng: -104.99}
    });
    directionsDisplay.setMap(map);

    document.getElementById('submit').addEventListener('click', function() {
      calculateAndDisplayRoute(directionsService, directionsDisplay);
    });
  }

  function calculateAndDisplayRoute(directionsService, directionsDisplay) {
    directionsService.route({
      origin: document.getElementById('start').value,
      destination: document.getElementById('end').value,
      optimizeWaypoints: true,
      travelMode: 'DRIVING'
    }, function(response, status) {
      if (status === 'OK') {
        directionsDisplay.setDirections(response);
        var route = response.routes[0];
        var summaryPanel = document.getElementById('directions-panel');
        summaryPanel.innerHTML = '';
        for (var i = 0; i < route.legs.length; i++) {
          var routeSegment = i + 1;
          summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
              '</b><br>';
          summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
          summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
          summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
        }
      } else {
        window.alert('Directions request failed due to ' + status);
      }

        var interval = document.getElementById('interval').value*1609.34;
        var allLegs = directionsDisplay.directions.routes[0].overview_path;
        var legDistance = 0;
        var legDistances = [];
        function computeLegDistance(){
          for (var i = 0; i < allLegs.length - 1; i++) {
            var distance = google.maps.geometry.spherical.computeDistanceBetween(allLegs[i], allLegs[i+1]);
            legDistance += distance
            if (legDistance >= interval) {
              legDistances.push(allLegs[i+1]);
              legDistance = 0;
            }
          }
        }
      computeLegDistance();
      buildMapWithWaypts(legDistances);
    });

    function buildMapWithWaypts(waypts) {
      var formattedWaypts = [];

      for (var i = 0; i < waypts.length - 1; i++) {
        formattedWaypts.push({location: waypts[i], stopover: true})
      }

      directionsService.route({
        origin: document.getElementById('start').value,
        destination: document.getElementById('end').value,
        waypoints: formattedWaypts,
        optimizeWaypoints: true,
        travelMode: 'DRIVING'
      }, function(response, status) {
        if (status === 'OK') {
          directionsDisplay.setDirections(response);
          var route = response.routes[0];
          var summaryPanel = document.getElementById('directions-panel');
          summaryPanel.innerHTML = '';
          for (var i = 0; i < route.legs.length; i++) {
            var routeSegment = i + 1;
            summaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +
                '</b><br>';
            summaryPanel.innerHTML += route.legs[i].start_address + ' to ';
            summaryPanel.innerHTML += route.legs[i].end_address + '<br>';
            summaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';
          }
        } else {
          window.alert('Directions request failed due to ' + status);
        }
      });
    }
  }
</script>

<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['google_key'] %>&callback=initMap&libraries=geometry">
</script>
